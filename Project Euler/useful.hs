
module Useful
(
    primes,
    isOddPrime,
    isPrime,
    isPermutation
) where

import Data.List ((\\))

-- all prime numbers generated by a recursive sieve of erathosthenes
primes :: [Int]
primes = sieve [2..]
    where sieve (p:ns) = p : sieve [n | n<-ns, n `mod` p /= 0]

-- pretty naive prime check for odd numbers. (ONLY FOR ODD NUMBERS!)
isOddPrime :: Int -> Bool
isOddPrime n = null $ filter (\k -> n `mod` k == 0) [3, 5.. limit]
    where limit = ceiling $ sqrt $ fromIntegral n

-- simple prime check in O(sqrt(n))
isPrime :: Int -> Bool
isPrime n = (n >= 2) && (n `mod` 2 /= 0 || n == 2) && (isOddPrime n) 

-- returns whether one string is a permutation of the other
isPermutation :: String -> String -> Bool
isPermutation s1 s2 = length s1 == length s2 && null (s1 \\ s2)
