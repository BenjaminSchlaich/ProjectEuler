
-- all prime numbers generated by a recursive sieve of erathosthenes
primes :: [Int]
primes = sieve [2..]
    where sieve (p:ns) = p : sieve [n | n<-ns, n `mod` p /= 0]

-- pretty naive prime check for odd numbers. (ONLY FOR ODD NUMBERS!)
oddPrime :: Int -> Bool
oddPrime n = null $ filter (\k -> n `mod` k == 0) [3, 5.. limit]
    where limit = ceiling $ sqrt $ fromIntegral n

-- simple prime check in O(sqrt(n))
prime :: Int -> Bool
prime n = (n >= 2) && (n `mod` 2 /= 0 || n == 2) && (oddPrime n) 
